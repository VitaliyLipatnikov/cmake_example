cmake_minimum_required(VERSION 3.15)
project(project)

set(CMAKE_CXX_STANDARD 14)


set(SOURCE_FILES main.cpp
        
        )


include_directories(
        /usr/include/glib-2.0/
       
)

#Директория с самой библиотекой
set( LINK_DIR libs/p7_logger )
link_directories( ${LINK_DIR})
#Сама библиотека
link_libraries( P7)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_CXX_FLAGS "-Wall -Wextra -W ")
set(CMAKE_CXX_FLAGS_DEBUG "-g")

set(CMAKE_CXX_FLAGS_RELEASE "-O2")

set( CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/bin-${CMAKE_BUILD_TYPE}" )

#Статический анализоатор в конфигурации debug , если нужно использовать санитайзер - раскомментировать
if (CMAKE_BUILD_TYPE STREQUAL "Debug")

    #Штобы запустить с Sanitazer раскомментировать следующие определения
    #add_compile_options(-fsanitize=address)
    #add_link_options(-fsanitize=address)

    #Статический анализатор CPPcheck
    find_program(CMAKE_CXX_CPPCHECK NAMES cppcheck)
    if(CMAKE_CXX_CPPCHECK)
        list(APPEND CMAKE_CXX_CPPCHECK
                "--enable=warning"
                )
    endif()
endif()


add_executable(project ${SOURCE_FILES})

#Путь к родительской папке
get_filename_component(PARENT_DIR ${CMAKE_CURRENT_SOURCE_DIR} PATH)

#Скопировать файл конфига
add_custom_command(
        TARGET ${PROJECT_NAME} PRE_BUILD
        #Конфиги
        COMMAND ${CMAKE_COMMAND} -E
        copy_directory ${PARENT_DIR}/Cfg/  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/Cfg

        #Копировать файлы эмуляции
        TARGET ${PROJECT_NAME} PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E
        copy_directory ${PARENT_DIR}/emul_files  ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/emul_files
)

target_link_libraries(project anl nanomsg glib-2.0 rt pthread P7)

