
#cmake ./ -DCMAKE_BUILD_TYPE=Debug
cmake ./ -DCMAKE_BUILD_TYPE=Release
make
make _ALL


#запуск valgrind  для отслеживания учетек
valgrind --leak-check=full --leak-resolution=med --track-origins=yes --vgdb=no program

#запуск valgrind c отслеживанием использования памяти, для просмотра результатов используется спициальная утилита
#установить которую нужно.
add-apt-repository ppa:kubuntu-ppa/backports
apt-get update && apt-get install massif-visualizer

#для просмотра результатов работы cachegrind используется утилита Kcachegrind , ну или может (GraphViz)
sudo apt update
sudo apt install snapd
sudo snap install kcachegrind

#профилирование памяти 
-stacks=yes  Профилирование стека очень сильно замедляет 
--time-unit=<i|ms|B> [default: i] Единица времени, используемая для профилирования . Существует три возможности: выполнение инструкций (i), что подходит для большинства случаев; 
реальное (настенное) время (мс, т.е. миллисекунды), что иногда бывает полезно; 
и байты, выделенные/освобожденные в куче и/или стеке (B), что полезно для очень коротких программ, а также для целей тестирования, поскольку это наиболее воспроизводимо на разных машинах.
--max-snapshots=<n> [default: 100]  Максимальное количество записанных снимков. Если установлено значение N, для всех программ, за исключением очень кратковременных, окончательное количество снимков будет между N/2 и N.
--ignore-fn=<name> Любое прямое выделение кучи (т. е. вызов malloc, new и т. д. или вызов функции, указанной в параметре --alloc-fn), которое происходит в функции, указанной в этом параметре, будет игнорироваться.
--alloc-fn=<name> Функции, указанные с помощью этой опции, будут обрабатываться так, как если бы они были функцией выделения кучи, такой как malloc. 
Это полезно для функций, которые являются обертками для malloc или new, которые могут заполнить деревья распределения неинтересной информацией.
//запуск, если программа и файл в том же каталоге, в котором открыта консоль то --massif-out-file=./filename  ./program
valgrind --tool=massif --massif-out-file=filename --max-snapshots=1000 --stacks=yes.  program


запуск valgrind профилировщика, для просмотра результатов испольузется kcachegrind 
valgrind --tool=callgrind ./templateProj --callgrind-out-file=./callgrind.out 100000000

//Для включения дампов ядра
#enable coredump
ulimit -c unlimited
#set path
sudo  sysctl kernel.core_pattern=/home/user/CORE_DUMP/dump-%e-%p

