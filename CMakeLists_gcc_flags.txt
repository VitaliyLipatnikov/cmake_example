cmake_minimum_required(VERSION 3.19)
project(nullPointer)

set(CMAKE_CXX_STANDARD 14)

set(CMAKE_CXX_FLAGS_RELEASE -O2)

#Flags
# -Wall — это "агрегатор" базовых предупреждений.
# -Wextra  - тоже предупреждения
# -Wfloat-equal: полезно, потому что обычно проверка чисел с плавающей запятой на равенство — это плохо.
# -Wshadow: предупреждать всякий раз, когда локальная переменная затеняет другую локальную переменную, параметр или глобальную переменную, а также всякий раз, когда затеняется встроенная функция.

#-Wextra — это включение предупреждений, которые могут быть менее полезными или более неприятными
#(поскольку они могут предупреждать о коде, приемлемом для программиста), чем другие варианты.
#Обычно его используют, когда вы хотите просмотреть свой код на наличие проблем и внести изменения, чтобы удовлетворить этим дополнительным предупреждениям.

#-Wpedantic (pedantic) – это более строгое соблюдение языковых стандартов. Он предупреждает о некоторых случаях использования языковых расширений,
#которые компилятор считает нормальными, но которые могут сделать программу непереносимой для других компиляторов.

# -Werror все предупреждения станут ошибками

# -std=c++11 указание стандарта

#-Werror
#-pedantic-errors

#-Wall
#-Wextra
#-Wpedantic

#-Wcast-align
#-Wcast-qual
#-Wconversion
#-Wctor-dtor-privacy
#-Wduplicated-branches
#-Wduplicated-cond
#-Wextra-semi
#-Wfloat-equal
#-Wlogical-op
#-Wnon-virtual-dtor
#-Wold-style-cast
#-Woverloaded-virtual
#-Wredundant-decls
#-Wsign-conversion
#-Wsign-promo


#Статический анализоатор в конфигурации debug , если нужно использовать санитайзер - раскомментировать
if (CMAKE_BUILD_TYPE STREQUAL "Debug")

    #Штобы запустить с Sanitazer раскомментировать следующие определения
    #Используйте -fsanitize=address, чтобы включить AddressSanitizer (ASan),
    #компилятор и технологию среды выполнения, предназначенную для быстрого обнаружения ошибок памяти.

    #Используйте -fsanitize=undefined, чтобы включить UndefedBehaviorSanitizer (UBSan), быстрый детектор неопределенного поведения,
    #который изменяет программу во время компиляции, чтобы перехватывать различные виды неопределенного поведения во время выполнения программы.
    #Чтобы использовать UBSan с минимальным временем выполнения, которое называется минимальным UBSan, укажите -fsanitize=undefined -fsanitize-minimal-runtime.

    #-fsanitize=memory  обнаруживает чтение неинициализированной памяти(не поддерживается в GCC)

    #Штобы включить проверку типа  использование стека после возврата НУЖНО собрать с флагом -fsanitize=address
    #И при запуску прогаммы передать ей опцию  ./your_program ASAN_OPTIONS=detect_stack_use_after_return=1
    #Запускать лучше из терминала

    #LeakSanitizer  -fsanitize=leak  сообщает о выделенной памяти, которая не была высвобождена до завершения работы программы.
    #Такое поведение не обязательно является ошибкой. Но высвобождение всей выделенной памяти облегчает,
    #например, отлов реальных, непредусмотренных утечек памяти

    #-fsanitize=null - Эта опция включает проверку указателя.
    #В частности, приложение, созданное с включенной этой опцией, выдаст сообщение об ошибке,
    #когда оно попытается разыменовать NULL-указатель, или если ссылка (возможно, ссылка rvalue) привязана к NULL-указателю,
    #или если для объекта вызывается метод. на который указывает NULL-указатель.

    #-fsanitize=integer-divide-by-zero.


    add_compile_options(-fsanitize=address -fsanitize=undefined  )
    add_link_options(-fsanitize=address -fsanitize=undefined  )

    #Статический анализатор CPPcheck
    #find_program(CMAKE_CXX_CPPCHECK NAMES cppcheck)
    #if(CMAKE_CXX_CPPCHECK)
    #    list(APPEND CMAKE_CXX_CPPCHECK
    #            "--enable=warning"
    #            )
    #endif()
endif()

add_executable(nullPointer main.cpp)