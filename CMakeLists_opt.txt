cmake_minimum_required(VERSION 3.16)
project(maven_run C CXX)

set(CMAKE_CXX_STANDARD 14)

include_directories( ./lib_include/p7logger_inc )

link_directories(./libs/p7_logger)

#-Ofast: Новое в GCC 4.7, состоит из -O3 plus -ffast-math, -fno-protect-parens, -fallow-store-data-races, -fstack-arrays и -fno-semantic-interposition.
#Этот параметр нарушает строгое соответствие стандарту, и не рекомендуется для использования. \
#Никогда не используйте этот флаг для всей системы, только для конкретного пакета и только при условии, что программа была протестирована для его использования

#-ffast-math -march=native -mtune=native
#Чтобы полностью использовать преимущества регистров AVX YMM, следует использовать -ftree-vectorize, -O3 или -Ofast

#-ftree-vectorize — параметр оптимизации (по умолчанию при -O3 и -Ofast), который по возможности пытается векторизовать циклы с помощью выбранной ISA.
#Причина, по которой она ранее не включалась при -O2 — она не всегда улучшает код, может также сделать его медленнее, и обычно делает код больше;
#зависит от конкретного цикла и т. д. Начиная с GCC 12, эта оптимизация включена в самой незатратной модели (-fvect-cost-model=very-cheap), дабы достичь баланса между размером кода и скоростью выполнения. Затратная модель может быть указана с помощью -fvect-cost-model.
#Начиная с GCC 12, эта оптимизация включена в самой незатратной модели (-fvect-cost-model=very-cheap),

# Первая команда говорит компилятору не производить линковку (-c), и вместо того, чтобы интерпретировать опцию --help для
# уточнения параметров командной строки, показывает какие опции включены или отключены (-Q).
# В этом случае показаны те опции, которые были включены для выбранной цели:
# gcc -c -Q -march=native --help=target

# Вторая команда покажет директивы компилятора для построения заголовочного файла, но без фактического выполнения, а результат работы выведет на экран (-###).
# Вывод содержит все параметры оптимизации, а также выбранную архитектуру:

# /lib64/ld-linux-x86-64.so.2 --help  - можно использовать для определения -march для более универсальной архитектуры процессора

# -march=native. Когда используется этот флаг, GCC попытается распознать процессор и автоматически установит для него подходящие флаги.
# Однако, не нужно его использовать, если собираетесь компилировать пакеты для разных CPU! "native" означает, что полученный код может запускаться только на этом типе CPU


# Также, доступны флаги -mtune и -mcpu. Эти флаги обычно используются только тогда, когда нет доступного параметра -march;
# определенные архитектуры процессоров могут требовать -mtune или даже -mcpu.
# К сожалению, поведение GCC не совсем предсказуемо для того, как эти флаги ведут себя при переходе от одной архитектуры к другой.
# Параметр -mtune производит более общий код, чем -march.

#Не используйте -mcpu на системах с x86 или x86-64, так как это не рекомендуется для этих архитектур.

#Общеупотребительный флаг - -pipe. Этот флаг не влияет на генерируемый код, но ускоряет процесс компиляции.
#Он сообщает компилятору, чтобы тот использовал конвейер (pipe) вместо временных файлов в течение разных стадий компиляции,
#которые используют большее количество памяти. На системах с небольшим количеством памяти, GCC может завершить свою работу.
#В этих случаях, не используйте этот флаг.

#Оптимизация во время связывания -flto

#Сгенерировать файл профилировщика
#SET(PGO_COMPILE_FLAGS "-fprofile-generate=${CMAKE_BINARY_DIR}/profile_data")

#Использовать сгенерированный файл профилировщика
#SET(PGO_TRAINING_DATA ${CMAKE_BINARY_DIR}/profile_data/)
#SET(PGO_COMPILE_FLAGS "-fprofile-use=${PGO_TRAINING_DATA}")


set(CMAKE_CXX_FLAGS_RELEASE "-O3  -march=alderlake -pipe ${PGO_COMPILE_FLAGS} ")

add_executable(maven_run main.cpp)

target_compile_options( maven_run PUBLIC -W -Wall -Wextra -pedantic -pedantic-errors)

target_link_libraries( maven_run p7 )

get_target_property(flags maven_run COMPILE_OPTIONS)

add_custom_command(TARGET maven_run POST_BUILD
        COMMAND echo built with the flags: ${flags}
        )